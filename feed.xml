

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Calvin's Blog</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2024-11-10T22:10:59+08:00</updated>
  <author>
    <name>Calvin</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 Calvin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>如何准备 AZ-305 考试</title>
    <link href="/posts/how-to-prepare-az-305/" rel="alternate" type="text/html" title="如何准备 AZ-305 考试" />
    <published>2024-08-29T07:35:00+08:00</published>
  
    <updated>2024-08-29T07:35:00+08:00</updated>
  
    <id>/posts/how-to-prepare-az-305/</id>
    <content src="/posts/how-to-prepare-az-305/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>AZ-305 是微软提供的 Azure 认证考试之一，考试的全称是 Designing Microsoft Azure Infrastructure Solutions, 考试通过后获取的证书名称是 Microsoft Certified: Azure Solutions Architect Expert。

AZ-305 认证主要面向云解决方案架构师，其核心作用是帮助 IT 专业人士掌握在 Microsoft Azure 平台上设计和构建企业级云解决方案的能力，对于想从事云解决方案架构师的工作还是蛮有帮助的。

下面我列举一些自己在准备 AZ-305 考试的一些心得，仅供参考。

前置条件
AZ-305 认证适合有一定 Azure 经验的专业人士，要考取 AZ-305 ，你需要有 Azure Administrator 相关的技能，必须先考取 AZ-104 ，也就是 Microso...</summary>

  </entry>

  
  <entry>
    <title>Python 使用整理</title>
    <link href="/posts/python-experience/" rel="alternate" type="text/html" title="Python 使用整理" />
    <published>2023-04-16T08:00:00+08:00</published>
  
    <updated>2023-04-16T08:00:00+08:00</updated>
  
    <id>/posts/python-experience/</id>
    <content src="/posts/python-experience/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>Python 启动http服务器

# Python3
python -m http.server -cgi 8080


Python 取环境变量

import os
print(os.environ[&amp;#39;YOURENVNAME&amp;#39;])


Python Function定义

def my_func(a, b):
    return a+b


Python 时间戳

import time
now = int(round(time.time()*1000))
now02 = time.strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;,time.localtime(now/1000))
now02
# Use below
now =  time.strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;,time.localtime())


Python 获取网页信息
d...</summary>

  </entry>

  
  <entry>
    <title>Git Pro 读书简记</title>
    <link href="/posts/pro-git/" rel="alternate" type="text/html" title="Git Pro 读书简记" />
    <published>2023-03-05T08:00:00+08:00</published>
  
    <updated>2023-03-05T08:00:00+08:00</updated>
  
    <id>/posts/pro-git/</id>
    <content src="/posts/pro-git/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>Git是一个非常好的版本管理工具，一般只用到了一些常用的命令做简单的备份回退等。最近结合《ProGit》和《Git权威指南》进行了查漏补缺和更系统深入的学习，下面是结合ProGit一书做的读书简记。

起步



1 初次运行Git前的配置

Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：


  . /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的git config 时，它会从此文件读写配置变量。
  . ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git读写此文件。
  . 当前使用仓库的 Git 目录中的 config 文件（就是 .git/con...</summary>

  </entry>

  
  <entry>
    <title>Docker 是如何运行的</title>
    <link href="/posts/docker-namespace/" rel="alternate" type="text/html" title="Docker 是如何运行的" />
    <published>2022-04-02T10:03:00+08:00</published>
  
    <updated>2024-11-10T08:10:33+08:00</updated>
  
    <id>/posts/docker-namespace/</id>
    <content src="/posts/docker-namespace/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>之前有篇博客介绍了 docker 的一些常用使用命令，这篇博客来详细研究一下 docker 是如何运行的。

我们可以使用 docker exec 在这个容器(container)内来执行一个进程。

或者说，在这个容器内，我们是 root，这里的容器是什么呢，在 linux 里面，容器实现的方法就是 namespace .

什么是 namespace

我们查询一下官方文档 https://docs.docker.com/get-started/overview/#the-underlying-technology 里面提到


  Docker is written in the Go programming language and takes advantage of several features of the Linux kernel to deliver its f...</summary>

  </entry>

  
  <entry>
    <title>圣诞特辑-交换礼物</title>
    <link href="/posts/gift-exchange/" rel="alternate" type="text/html" title="圣诞特辑-交换礼物" />
    <published>2021-12-25T15:14:00+08:00</published>
  
    <updated>2024-11-10T08:10:33+08:00</updated>
  
    <id>/posts/gift-exchange/</id>
    <content src="/posts/gift-exchange/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>圣诞节到了，Team里面的小伙伴组织了一个交换礼物的活动，我也奉命接下了写个小工具的任务。

需求

需求很简单，就是将 人员名单 和 礼物清单 排成两列，然后随机摇出新的匹对，这样每个人就得到了新的礼物。



算法

核心算法其实很简单，就是将数组进行随机乱序排列，代码如下

从后往前遍历，随机一个前面的数的坐标和当前数交换，所有位置的数字都交换完成

function shuffle(arr) {
    let i = arr.length;
    while (i) {
        let j = Math.floor(Math.random() * i--);
        [arr[j], arr[i]] = [arr[i], arr[j]];
    }
}


代码


  
    采用 web 实现，这样表现力强一点，选择了 bootstrap 框架做为...</summary>

  </entry>

</feed>


