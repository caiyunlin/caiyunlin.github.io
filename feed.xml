

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Calvin's Blog</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2024-11-17T22:15:33+08:00</updated>
  <author>
    <name>Calvin</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 Calvin </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>理解 HTTPS：加密解密的全过程</title>
    <link href="/posts/understand-https/" rel="alternate" type="text/html" title="理解 HTTPS：加密解密的全过程" />
    <published>2024-11-17T21:08:00+08:00</published>
  
    <updated>2024-11-17T22:14:56+08:00</updated>
  
    <id>/posts/understand-https/</id>
    <content src="/posts/understand-https/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>在互联网中，确保通信的安全至关重要，特别是当我们浏览网站时，HTTPS（安全的超文本传输协议）成为保护用户数据隐私的关键技术。
本文将通过简单的解释和流程图，深入理解 HTTPS 如何在客户端和服务器之间保证通信安全。

什么是 HTTPS？

HTTPS 是 HTTP 协议的安全版本，它通过 SSL/TLS 协议 为 HTTP 数据传输提供加密、认证和完整性保护。其核心优势在于：


  加密：确保数据不被窃取。
  认证：确保通信的双方身份可靠。
  完整性：确保数据在传输过程中未被篡改。




HTTPS 如何工作？

HTTPS 的工作原理主要涉及两种加密机制：非对称加密 和 对称加密。下面是 HTTPS 中的加密解密流程。

1. 非对称加密阶段：密钥协商

当你访问一个 HTTPS 网站时，首先会进行一次 TLS 握手，通过此过程客户端和服务器协商出一个安全的通信密钥。...</summary>

  </entry>

  
  <entry>
    <title>Web实时通信的几种方式</title>
    <link href="/posts/web-real-time-communication/" rel="alternate" type="text/html" title="Web实时通信的几种方式" />
    <published>2024-09-07T09:46:00+08:00</published>
  
    <updated>2024-11-11T08:44:19+08:00</updated>
  
    <id>/posts/web-real-time-communication/</id>
    <content src="/posts/web-real-time-communication/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>在 Web 应用中，实时通信非常关键，无论是消息传递、通知还是数据更新。为了实现实时通信，通常使用 HTTP 轮询、服务器推送事件（SSE）、WebSocket 和 WebHooks 四种方法。本文将深入探讨它们的工作原理、适用场景及示例。

1. HTTP 轮询

工作原理：HTTP 轮询是一种最基础的通信方法，客户端定期向服务器发送请求，查询是否有新数据。即使没有更新，服务器也会响应，这种“问询”式的通信导致资源浪费。

优点：实现简单，对服务器和客户端要求较低，适合小型应用。

缺点：当请求频繁时，容易增加服务器负载；不适合数据更新较快的应用。

示例：假设有一个天气应用，用户每隔几分钟检查天气更新。由于不需要即时更新，应用可以采用 HTTP 轮询，每 5 分钟请求一次天气数据。

客户端（JavaScript）
function fetchUpdates() {
  fetc...</summary>

  </entry>

  
  <entry>
    <title>如何准备 AZ-305 考试</title>
    <link href="/posts/how-to-prepare-az-305/" rel="alternate" type="text/html" title="如何准备 AZ-305 考试" />
    <published>2024-08-29T07:35:00+08:00</published>
  
    <updated>2024-11-11T06:11:46+08:00</updated>
  
    <id>/posts/how-to-prepare-az-305/</id>
    <content src="/posts/how-to-prepare-az-305/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>AZ-305 是微软提供的 Azure 认证考试之一，考试的全称是 Designing Microsoft Azure Infrastructure Solutions, 考试通过后获取的证书名称是 Microsoft Certified: Azure Solutions Architect Expert。

AZ-305 认证主要面向云解决方案架构师，其核心作用是帮助 IT 专业人士掌握在 Microsoft Azure 平台上设计和构建企业级云解决方案的能力，对于想从事云解决方案架构师的工作还是蛮有帮助的。

下面我列举一些自己在准备 AZ-305 考试的一些心得，仅供参考。

前置条件
AZ-305 认证适合有一定 Azure 经验的专业人士，要考取 AZ-305 ，你需要有 Azure Administrator 相关的技能，必须先考取 AZ-104 ，也就是 Microso...</summary>

  </entry>

  
  <entry>
    <title>Python 使用整理</title>
    <link href="/posts/python-experience/" rel="alternate" type="text/html" title="Python 使用整理" />
    <published>2023-04-16T08:00:00+08:00</published>
  
    <updated>2023-04-16T08:00:00+08:00</updated>
  
    <id>/posts/python-experience/</id>
    <content src="/posts/python-experience/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>Python 启动http服务器

# Python3
python -m http.server -cgi 8080


Python 取环境变量

import os
print(os.environ[&amp;#39;YOURENVNAME&amp;#39;])


Python Function定义

def my_func(a, b):
    return a+b


Python 时间戳

import time
now = int(round(time.time()*1000))
now02 = time.strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;,time.localtime(now/1000))
now02
# Use below
now =  time.strftime(&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;,time.localtime())


Python 获取网页信息
d...</summary>

  </entry>

  
  <entry>
    <title>Git Pro 读书简记</title>
    <link href="/posts/pro-git/" rel="alternate" type="text/html" title="Git Pro 读书简记" />
    <published>2023-03-05T08:00:00+08:00</published>
  
    <updated>2023-03-05T08:00:00+08:00</updated>
  
    <id>/posts/pro-git/</id>
    <content src="/posts/pro-git/" />
    <author>
      <name>Calvin</name>
    </author>

  
    
    <category term="技术" />
    
  

  <summary>Git是一个非常好的版本管理工具，一般只用到了一些常用的命令做简单的备份回退等。最近结合《ProGit》和《Git权威指南》进行了查漏补缺和更系统深入的学习，下面是结合ProGit一书做的读书简记。

起步



1 初次运行Git前的配置

Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：


  . /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的git config 时，它会从此文件读写配置变量。
  . ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git读写此文件。
  . 当前使用仓库的 Git 目录中的 config 文件（就是 .git/con...</summary>

  </entry>

</feed>


