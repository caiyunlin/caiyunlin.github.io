import{_ as a,c as r,o,ai as s}from"./chunks/framework.CtWg-Y9G.js";const T=JSON.parse('{"title":"理解 HTTPS 加密解密的全过程","description":"","frontmatter":{"published":true,"date":"2024-11-17T00:00:00.000Z","title":"理解 HTTPS 加密解密的全过程","categories":"技术","tags":"[https]","urlname":"understand-https","url":"https://www.caiyunlin.com/posts/understand-https/"},"headers":[],"relativePath":"posts/2024-11-17-understand-https.md","filePath":"posts/2024-11-17-understand-https.md"}'),i={name:"posts/2024-11-17-understand-https.md"};function n(l,t,e,h,d,p){return o(),r("div",null,t[0]||(t[0]=[s('<p>在互联网中，确保通信的安全至关重要，特别是当我们浏览网站时，HTTPS（安全的超文本传输协议）成为保护用户数据隐私的关键技术。 本文将通过简单的解释和流程图，深入理解 HTTPS 如何在客户端和服务器之间保证通信安全。</p><h2 id="什么是-https" tabindex="-1">什么是 HTTPS？ <a class="header-anchor" href="#什么是-https" aria-label="Permalink to &quot;什么是 HTTPS？&quot;">​</a></h2><p>HTTPS 是 HTTP 协议的安全版本，它通过 <strong>SSL/TLS 协议</strong> 为 HTTP 数据传输提供加密、认证和完整性保护。其核心优势在于：</p><ol><li><strong>加密</strong>：确保数据不被窃取。</li><li><strong>认证</strong>：确保通信的双方身份可靠。</li><li><strong>完整性</strong>：确保数据在传输过程中未被篡改。</li></ol><hr><h2 id="https-如何工作" tabindex="-1">HTTPS 如何工作？ <a class="header-anchor" href="#https-如何工作" aria-label="Permalink to &quot;HTTPS 如何工作？&quot;">​</a></h2><p>HTTPS 的工作原理主要涉及两种加密机制：<strong>非对称加密</strong> 和 <strong>对称加密</strong>。下面是 HTTPS 中的加密解密流程。</p><h3 id="_1-非对称加密阶段-密钥协商" tabindex="-1">1. <strong>非对称加密阶段：密钥协商</strong> <a class="header-anchor" href="#_1-非对称加密阶段-密钥协商" aria-label="Permalink to &quot;1\\. **非对称加密阶段：密钥协商**&quot;">​</a></h3><p>当你访问一个 HTTPS 网站时，首先会进行一次 <strong>TLS 握手</strong>，通过此过程客户端和服务器协商出一个安全的通信密钥。此阶段主要使用 <strong>非对称加密</strong>，即公钥加密和私钥解密。</p><h4 id="流程" tabindex="-1">流程： <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程：&quot;">​</a></h4><ol><li><strong>服务器发送公钥</strong>：服务器通过其 SSL/TLS 证书向客户端提供公钥。</li><li><strong>客户端生成对称密钥</strong>：浏览器（客户端）生成一个随机的对称密钥（session key）。</li><li><strong>客户端加密对称密钥并发送</strong>：浏览器用服务器的公钥加密对称密钥，然后将其发送给服务器。</li><li><strong>服务器解密对称密钥</strong>：服务器用自己的私钥解密获得对称密钥。</li></ol><h3 id="_2-对称加密阶段-数据传输" tabindex="-1">2. <strong>对称加密阶段：数据传输</strong> <a class="header-anchor" href="#_2-对称加密阶段-数据传输" aria-label="Permalink to &quot;2\\. **对称加密阶段：数据传输**&quot;">​</a></h3><p>完成密钥协商后，客户端和服务器都使用这个对称密钥加密和解密传输的数据。对称加密效率较高，因此用于后续的通信。</p><h4 id="流程-1" tabindex="-1">流程： <a class="header-anchor" href="#流程-1" aria-label="Permalink to &quot;流程：&quot;">​</a></h4><ol><li><strong>客户端加密请求数据</strong>：浏览器用对称密钥加密请求数据。</li><li><strong>服务器解密数据并处理请求</strong>：服务器用相同的对称密钥解密请求数据并处理。</li><li><strong>服务器加密响应数据</strong>：服务器用对称密钥加密响应数据。</li><li><strong>客户端解密响应数据</strong>：浏览器用相同的对称密钥解密服务器返回的数据。</li></ol><h3 id="_3-为什么中间人无法解密" tabindex="-1">3. 为什么中间人无法解密？ <a class="header-anchor" href="#_3-为什么中间人无法解密" aria-label="Permalink to &quot;3\\. 为什么中间人无法解密？&quot;">​</a></h3><p>即使中间人拦截了通信数据，他也无法解密，因为：</p><ul><li>中间人无法获取服务器的私钥（只有服务器持有私钥）。</li><li>即使中间人拦截了加密的对称密钥传输，也无法解密，因为对称密钥是用服务器的公钥加密的，只有服务器能解密。</li></ul><h3 id="_4-一个简单的类比" tabindex="-1">4. 一个简单的类比 <a class="header-anchor" href="#_4-一个简单的类比" aria-label="Permalink to &quot;4\\. 一个简单的类比&quot;">​</a></h3><p>假设你（浏览器）要发送一封加密邮件给朋友（服务器）：</p><ol><li><strong>朋友（服务器）先寄给你一个锁（公钥），锁配有他自己的钥匙（私钥）。</strong></li><li><strong>你（浏览器）用这个锁将信件锁起来（加密），然后寄给朋友。</strong><ul><li>你不需要有钥匙（私钥），因为锁可以上锁但不能解锁。</li></ul></li><li><strong>朋友用自己的钥匙（私钥）打开信件，取出内容（解密）。</strong></li><li><strong>之后，双方协商了一套暗号（对称密钥），用来保护后续的通信内容。</strong><ul><li>这套暗号双方都知道，之后你们都用这套暗号互相加密解密。</li></ul></li></ol><h2 id="流程图-https-加密解密过程" tabindex="-1">流程图：HTTPS 加密解密过程 <a class="header-anchor" href="#流程图-https-加密解密过程" aria-label="Permalink to &quot;流程图：HTTPS 加密解密过程&quot;">​</a></h2><p>下面是使用 <strong>Mermaid</strong> 生成的 HTTPS 加密解密流程图，简洁地展示了 HTTPS 中的加密和解密过程。</p><p><a href="https://mermaid.live/edit#pako:eNqVkstqwkAUhl8lzErBvkAWbtptV-5KNkMyasAkdpwUighNaYsI1l7SRS_YGxqhxdhFEQvFl3Em8S06OiQEo0KzmZB83znnH04dqJaGgAxq6NBGpor2dFjC0FBMiT9ViImu6lVoEmm3oiN-wJpEh2-sOQ4-_Az77oRek94Psmm-gPARwguePbVp65VTiikwUWonnxeMLIX-mH2dhtMuu-wJRPzhiGBliXau5ycOPf-c3_Qyoe_MJv3sSrUIDdxn1ryi_iTwRtS_4MKGtoE7iGcTlWnrhRtpNR4nUme_U24HnsOR0HvfLq1kWPYIHs7Y3Yi1hxtDDJIVRY-1RiJN0hBtxM0mvVSUtZ22eNGE4dSlj904Db1t0x_3_5mSHsgBA2ED6hrfyPqiigJIGRlIATJ_1VAR2hWiAMVscBTaxCocmyqQCbZRDthVDZJogYFchJUa_4o0nVh4X2z5ctlzAFt2qRwTfF0PLCsyGn9CNHn_" target="_blank" rel="noreferrer"><img src="https://mermaid.ink/img/pako:eNqVkstqwkAUhl8lzErBvkAWbtptV-5KNkMyasAkdpwUighNaYsI1l7SRS_YGxqhxdhFEQvFl3Em8S06OiQEo0KzmZB83znnH04dqJaGgAxq6NBGpor2dFjC0FBMiT9ViImu6lVoEmm3oiN-wJpEh2-sOQ4-_Az77oRek94Psmm-gPARwguePbVp65VTiikwUWonnxeMLIX-mH2dhtMuu-wJRPzhiGBliXau5ycOPf-c3_Qyoe_MJv3sSrUIDdxn1ryi_iTwRtS_4MKGtoE7iGcTlWnrhRtpNR4nUme_U24HnsOR0HvfLq1kWPYIHs7Y3Yi1hxtDDJIVRY-1RiJN0hBtxM0mvVSUtZ22eNGE4dSlj904Db1t0x_3_5mSHsgBA2ED6hrfyPqiigJIGRlIATJ_1VAR2hWiAMVscBTaxCocmyqQCbZRDthVDZJogYFchJUa_4o0nVh4X2z5ctlzAFt2qRwTfF0PLCsyGn9CNHn_?type=png" alt=""></a></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>通过 HTTPS，我们确保了数据传输的安全性，保护了个人隐私不被泄露。HTTPS 的安全性依赖于两种加密方式：<strong>非对称加密</strong>用于密钥交换和身份验证，<strong>对称加密</strong>则用于高效的数据传输。通过这一加密解密流程，客户端和服务器可以安全地交换信息，即使攻击者拦截了数据，也无法解密和篡改。</p><p>从浏览器到服务器，HTTPS 为我们的数据传输提供了一道强有力的防线，确保了互联网的安全性。希望通过这篇博客，大家对 HTTPS 的工作原理有了更清晰的认识！</p><p>【全文完】</p>',28)]))}const _=a(i,[["render",n]]);export{T as __pageData,_ as default};
