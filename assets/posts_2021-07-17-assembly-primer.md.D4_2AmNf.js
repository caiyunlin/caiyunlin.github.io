import{_ as a,c as i,o as n,ai as t}from"./chunks/framework.CtWg-Y9G.js";const o=JSON.parse('{"title":"汇编语言基础","description":"","frontmatter":{"title":"汇编语言基础","date":"2021-07-17 09:41:00 +0800","categories":["技术"],"tags":["bash","ubuntu","assembly"],"urlname":"assembly-primer","url":"https://www.caiyunlin.com/posts/assembly-primer/"},"headers":[],"relativePath":"posts/2021-07-17-assembly-primer.md","filePath":"posts/2021-07-17-assembly-primer.md"}'),p={name:"posts/2021-07-17-assembly-primer.md"};function l(e,s,d,h,k,r){return n(),i("div",null,s[0]||(s[0]=[t(`<p>最近查一些文章，涉及到了汇编语言，所以翻出一些资料复习一下。</p><p>我们平常学习的编程语言，如 C, C++, Java, C#,Python等等都是高级语言。我们也都知道，机器只能理解执行<code>0101</code>的代码，那高级语言如何转换为机器语言的？</p><p>其实高级语言是通过编译器转换为机器语言的，在编译过程中间会生成一个过渡性的语言，叫<code>汇编语言</code>，高级语言屏蔽了实现的细节，如对内存的操作，而<code>汇编语言</code>是低级语言，是通过指令直接对硬件，如<code>CPU的寄存器</code>和<code>内存</code>进行操作的语言，早期的程序员也是直接写<code>汇编语言</code>来控制程序运行，了解<code>汇编语言</code>有助于明白底层的实现，进而可以增加排错能力，以及优化代码。</p><h2 id="一点背景" tabindex="-1">一点背景 <a class="header-anchor" href="#一点背景" aria-label="Permalink to &quot;一点背景&quot;">​</a></h2><p>汇编语言是针对CPU设计的，每一种CPU都有自己的汇编指令集，所以针对不同的CPU的汇编语言写法是不一样的，比如 ARM(安卓手机CPU) 和 Intel(常用PC CPU) 他们的指令格式是不一样的。 即便是同一款CPU，指令格式上也可以不一样，常用的有 <code>ATT</code> 汇编格式和 <code>Intel</code>汇编格式。</p><p>通常一条汇编指令包含操作码和操作数两部分内容，格式为 <code>操作码(OP) 操作数</code></p><p>如 <code>mov $20 %al</code> 表示将立即数<code>20</code>保存到寄存器 <code>al</code>中去，这个写法是 <code>ATT</code>格式，如果用 <code>Intel</code>汇编代码格式写，那对应的代码就是 <code>MOV AL, 20H</code></p><blockquote><p>ATT 与 Intel 汇编代码格式：</p><p>Intel 汇编格式比较好理解，因为芯片是Intel生产的，他们自然设置了对应的汇编代码格式。</p><p>ATT（根据 &quot;AT&amp;T&quot;命名的，AT&amp;T是运营贝尔实验室多年的公司）格式的汇编代码，这是GCC,OBJDUMP等工具的默认格式，贝尔实验室是Unix系统的创建者，Linux 是 Unix 家族的一员，早期Linux所使用的的386汇编语言也是起源于Unix，Unix最初是为PDP－11开发的，曾先后被移植到VAX及68000系列的处理器上，这些处理器上的汇编语言都采用的是AT&amp;T的指令格式。当Unix被移植到i386时，自然也就采用了AT&amp;T的汇编语言格式，而不是Intel的格式。</p></blockquote><p><code>ATT</code>语法和<code>Intel</code>语法的一些区别</p><p>在<code>ATT</code>语法中，寄存器前冠以<code>％</code>，而立即数前冠以<code>$</code>，在<code>Intel</code>的语法中，寄存器和和立即数都没有前缀。</p><p>在<code>ATT</code>语法中，十六进制立即数前冠以“0x”，而在Intel的语法中，十六进制和二进制立即数后缀分别冠以<code>h</code>和<code>b</code></p><p>在 <code>Ubuntu</code> GCC 编译器中默认是 <code>ATT</code> 语法，本文也主要以<code>ATT</code>语法来示例。</p><h2 id="寄存器" tabindex="-1">寄存器 <a class="header-anchor" href="#寄存器" aria-label="Permalink to &quot;寄存器&quot;">​</a></h2><p>上面的示例代码中，命令 <code>mov $10 %al</code></p><p>是将数字 10 放到寄存器 al 中，那<code>al</code>是指哪个寄存器呢，可以参考下面的图表</p><p>下图是 8086 16位寄存器的简要介绍， AX 是累加寄存器，包含高位 AH 和 低位 AL，所以上述命令就是将数字 10 放到 累加寄存器的低位中。</p><p><img src="https://images.caiyunlin.com/20210717115924.png" alt="image"></p><p>上图是 16 位CPU的架构图，目前大部分的系统都是 64 位的CPU，可以参考下面的表格，第一行表示位数，高位的包含低位</p><table tabindex="0"><thead><tr><th>63~32</th><th>31~16</th><th>15~8</th><th>7~0</th><th>说明</th></tr></thead><tbody><tr><td>%rax</td><td>%eax</td><td>%ax</td><td>%al</td><td>==返回值==</td></tr><tr><td>%rbx</td><td>%ebx</td><td>%bx</td><td>%bl</td><td>Callee Saved</td></tr><tr><td>%rcx</td><td>%ecx</td><td>%cx</td><td>%cl</td><td>第4个参数</td></tr><tr><td>%rdx</td><td>%edx</td><td>%dx</td><td>%dl</td><td>第3个参数</td></tr><tr><td>%rsi</td><td>%esi</td><td>%si</td><td>%si</td><td>第2个参数</td></tr><tr><td>%rdi</td><td>%edi</td><td>%di</td><td>%di</td><td>第1个参数</td></tr><tr><td>%rbp</td><td>%ebp</td><td>%bp</td><td>%bp</td><td>Callee Saved</td></tr><tr><td>%rsp</td><td>%esp</td><td>%sp</td><td>%sp</td><td>==栈指针==</td></tr><tr><td>%r8</td><td>%r8d</td><td>%r8w</td><td>%r8b</td><td>第5个参数</td></tr><tr><td>%r9</td><td>%r9d</td><td>%r9w</td><td>%r9b</td><td>第6个参数</td></tr><tr><td>%r10</td><td>%r10d</td><td>%r10w</td><td>%r10b</td><td>Caller Saved</td></tr><tr><td>%r11</td><td>%r11d</td><td>%r11w</td><td>%r11b</td><td>Caller Saved</td></tr><tr><td>%r12</td><td>%r12d</td><td>%r12w</td><td>%r12b</td><td>Callee Saved</td></tr><tr><td>%r13</td><td>%r13d</td><td>%r13w</td><td>%r13b</td><td>Callee Saved</td></tr><tr><td>%r14</td><td>%r14d</td><td>%r14w</td><td>%r14b</td><td>Callee Saved</td></tr><tr><td>%r15</td><td>%r15d</td><td>%r15w</td><td>%r15b</td><td>Callee Saved</td></tr></tbody></table><p>如 <code>movl $10, %eax</code> 和 <code>mov $10 %ax</code> 是类似的效果，注意 ATT 的 <code>mov</code> 命令后面可以跟字长表示长度 ，字长定义如下 ：</p><table tabindex="0"><thead><tr><th>C声明</th><th>Intel数据类型</th><th>汇编代码后缀</th><th>大小（字节）</th></tr></thead><tbody><tr><td>char</td><td>字节(byte)</td><td>b</td><td>1</td></tr><tr><td>short</td><td>字(word)</td><td>w</td><td>2</td></tr><tr><td>int</td><td>双字(double word)</td><td>l</td><td>4</td></tr><tr><td>long</td><td>四字(quad word)</td><td>q</td><td>8</td></tr><tr><td>char*</td><td>四字</td><td>q</td><td>8</td></tr><tr><td>float</td><td>单精度</td><td>s</td><td>4</td></tr><tr><td>double</td><td>双精度</td><td>l</td><td>8</td></tr></tbody></table><h2 id="一个简单的例子" tabindex="-1">一个简单的例子 <a class="header-anchor" href="#一个简单的例子" aria-label="Permalink to &quot;一个简单的例子&quot;">​</a></h2><p>将下面文件保存为 <code>main.c</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>使用尝试使用<code>gcc</code>编译生成汇编, <code>gcc -O</code> 的参数是生成原始的汇编的命令，没有这个参数会生成经过优化的汇编命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Og</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -S</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .file</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">   &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">main.c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .text</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .globl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   main,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @function</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFB0:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_startproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        movl</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    $0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> %eax</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        ret</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_endproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFE0:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .size</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   main,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .-main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .ident</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .section</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        .note.GNU-stack,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,@progbits</span></span></code></pre></div><p>上述代码中 .file 大部分为汇编的描述代码，不会生成具体机器指令，我们可以忽略， 简化上面的汇编代码如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>.global main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main:</span></span>
<span class="line"><span>    movq $0, %rax</span></span>
<span class="line"><span>    ret</span></span></code></pre></div><p>稍微解释下这段代码， .global main 是告诉汇编器， main 为主要入口， <code>movq $0, %rax</code> 是指将立即数 0 移到累加寄存器 <code>rax</code>，<code>rax</code>也是返回数寄存器，程序最后的运行结果就放在这个寄存器中。 <code>ret</code> 就是 return 的缩写，是退出程序。</p><p>这段代码主要功能就是返回一个运行结果 0 ，然后退出。</p><p>我们将上述汇编代码保存为 <code>testmain.s</code> ，然后使用 <code>gcc</code> 来编译输出可执行文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testmain</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testmain.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./testmain</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 查询运行结果</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">0</span></span></code></pre></div><p>我们可以将上述 <code>movq $0</code> 改成其他数字如 <code>movq $10</code> ，重新编译测试结果，会发现最终结果也会改变。</p><h2 id="简单的加法" tabindex="-1">简单的加法 <a class="header-anchor" href="#简单的加法" aria-label="Permalink to &quot;简单的加法&quot;">​</a></h2><p>上面的代码，我们直接操作了累加寄存器设置了返回值，这一节我们仍然使用 c 反汇编来看一下加法的实现。</p><p>将下面文件保存为 <code>testaddab.c</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> addab</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> addab</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>使用<code>gcc</code>编译</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Og</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -S</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testaddab.s</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testaddab.c</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cat</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testaddab.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .file</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">   &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">testaddab.c</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .text</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .globl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  addab</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   addab,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @function</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addab:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFB0:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_startproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        leal</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    (%rdi,%rsi), %eax</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        ret</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_endproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFE0:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .size</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   addab,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .-addab</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .globl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   main,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @function</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">main:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFB1:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_startproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        movl</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    $3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> %esi</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        movl</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    $2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> %edi</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        call</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    addab</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        rep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ret</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .cfi_endproc</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.LFE1:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .size</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">   main,</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .-main</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .ident</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        .section</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">        .note.GNU-stack,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">,@progbits</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 输出可执行文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testaddab</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testaddab.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./testaddab</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 执行程序</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     # 查看执行结果</span></span></code></pre></div><p>简化上面的编码如下，保存为 <code>testadd.s</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>.global addab</span></span>
<span class="line"><span></span></span>
<span class="line"><span>addab:</span></span>
<span class="line"><span>    leal (%rdi,%rsi), %eax</span></span>
<span class="line"><span>    ret</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.global main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main:</span></span>
<span class="line"><span>    movl $3, %esi</span></span>
<span class="line"><span>    movl $2, %edi</span></span>
<span class="line"><span>    call addab</span></span>
<span class="line"><span>    rep ret</span></span></code></pre></div><p>重复上面的编译步骤，我们会得到如下结果</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testadd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> testadd.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./testadd</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> echo</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> $?</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">5</span></span></code></pre></div><p>我们可以看到 movl 将 3，和 2 分别放到寄存器 esi 和 edi， 然后调用函数 leal ，注意 lea 是 intel 的指令 (Load effect address ) 也就是取有效地址的意思，可以用它在实现快速的加法以及简单的乘法。</p><h2 id="hello-world" tabindex="-1">Hello World! <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World!&quot;">​</a></h2><p>下面我们写一段 hello world，和其他高级语言不一样，因为CPU只能做数值运算，而 hello world 涉及到显示，也就是IO，所以我们必须调用操作系统的函数来完成文本的输出， 将下面文件保存到 <code>helloworld.s</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span>    .section .data</span></span>
<span class="line"><span></span></span>
<span class="line"><span>message:</span></span>
<span class="line"><span>    .ascii &quot;hello world!\\n&quot;</span></span>
<span class="line"><span>    length = . - message</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    .section .text</span></span>
<span class="line"><span>    .global main</span></span>
<span class="line"><span></span></span>
<span class="line"><span>main:</span></span>
<span class="line"><span>    movq $1, %rax</span></span>
<span class="line"><span>    movq $1, %rdi</span></span>
<span class="line"><span>    lea message(%rip), %rsi</span></span>
<span class="line"><span>    movq $length, %rdx</span></span>
<span class="line"><span>    syscall</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    movq $60, %rax</span></span>
<span class="line"><span>    xor %rdi, %rdi</span></span>
<span class="line"><span>    syscall</span></span></code></pre></div><p>编译执行</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gcc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> helloworld</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> helloworld.s</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ./helloworld</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Hello</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> World!</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>汇编语言是针对硬件直接编程的语言，命令的格式为 <code>操作码 操作数</code></p><p>汇编语法有 ATT 和 Intel 之分</p><p>可以通过操作寄存器设置程序的返回值</p><p>需要显示字符，需要调用系统函数 <code>syscall</code></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noreferrer">https://www.cs.virginia.edu/~evans/cs216/guides/x86.html</a></p><p>【全文完】</p>`,57)]))}const A=a(p,[["render",l]]);export{o as __pageData,A as default};
