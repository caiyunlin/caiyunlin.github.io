import{_ as i,c as a,o as h,ai as t}from"./chunks/framework.CtWg-Y9G.js";const d=JSON.parse('{"title":"Pro Git 读书简记","description":"","frontmatter":{"title":"Pro Git 读书简记","date":"2023-03-05 08:00:00 +0800","categories":["技术"],"tags":["git"],"urlname":"pro-git","url":"https://www.caiyunlin.com/posts/pro-git/"},"headers":[],"relativePath":"posts/2023-03-05-pro-git.md","filePath":"posts/2023-03-05-pro-git.md"}'),n={name:"posts/2023-03-05-pro-git.md"};function k(l,s,p,e,r,g){return h(),a("div",null,s[0]||(s[0]=[t(`<p>Git是一个非常好的版本管理工具，一般只用到了一些常用的命令做简单的备份回退等。最近结合《ProGit》和《Git权威指南》进行了查漏补缺和更系统深入的学习，下面是结合ProGit一书做的读书简记。</p><h3 id="起步" tabindex="-1">起步 <a class="header-anchor" href="#起步" aria-label="Permalink to &quot;起步&quot;">​</a></h3><hr><p>1 初次运行Git前的配置</p><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。这些变量存储在三个不同的位置：</p><ul><li>. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的git config 时，它会从此文件读写配置变量。</li><li>. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git读写此文件。</li><li>. 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</li></ul><p>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。在 Windows 系统中，Git 会查找 $HOME 目录下（一般情况下是 C:\\Users$USER）的 .gitconfig 文件。Git 同样也会寻找 /etc/gitconfig 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。</p><p>2 <code>git config --list</code>命令可以列出所有Git当时能找到的配置。</p><h3 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h3><hr><p>1 Git不同于其他版本控制系统，Git是直接记录快照，而不是差异比较。</p><p>2 Git有工作目录、暂存（索引）区域、Git仓库三种工作状态（有时还有远程仓库）</p><p>3 用<code>git status</code>查看当前文件状态，<code>git status --short</code>或者<code>git status -s</code>可输出更简洁的状态。</p><p>新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。你可能注意到了 M 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。</p><p>4 .gitignore文件中可以指定忽略模式，支持正则表达式。要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p><p>5 查看已暂存和未暂存的修改。<code>git diff</code>比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。若要查看已暂存的将要添加到下次提交里的内容（和工作目录中当前文件的差异），可以用<code>git diff --cached</code>命令。（Git 1.6.1 及更高版本还允许使用 <code>git diff --staged</code>，效果是相同的，但更好记些。）</p><p>6 &#39;git commit -a&#39;可以跳过暂存区直接提交（跳过<code>git add</code>），但尽量避免使用。</p><p>7 移除文件。使用<code>git rm</code>移除。如果要移除的文件已经修改过且暂存了，必须使用-f选项强制删除。如果想要把文件从Git仓库中删除，但保留在工作目录中，使用<code>git rm --cached file</code>。</p><p>8 重命名使用<code>git mv file_from file_to</code>。</p><p>9 查看提交历史使用<code>git log</code>命令。</p><p>一些例子如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -2</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #显示最近两次提交每次提交的差异</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --stat</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    #在每次提交的下面列出额所有被修改过的文件、有多少文件被修改了以及被修改</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --pretty=format:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">%h %s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --graph</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #提交对象的简短哈希字串 提交说明 图显</span></span></code></pre></div><p>限制输出长度</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  --since=2.weeks</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #列出所有最近两周内的提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Sfunction_name</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   #找出添加或移除了某一个特定函数的引用的提交</span></span></code></pre></div><p>10 远程仓库的使用。可以使用<code>git remote --help</code>查看详细使用说明。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #显示远程仓库信息；</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [shortname] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #添加一个新的远程Git仓库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> fetch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [remote-name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#从远程仓库中抓取，不同于git pull，并不会合并，</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [remote-name] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">branch-name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #推送到远程仓库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [remote-name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#查看远程仓库 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rename</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [ori-name]  </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">dst-name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #重命名</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rm</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [shortname]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#移除</span></span></code></pre></div><p>11 打标签。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #列出标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.4</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my version 1.4</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #使用-a创建附注标签，-m指定存储在标签中的信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.4</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看标签信息与对应的提交信息</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.4-lw</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #创建轻量标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 9fceb02</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #后期打标签，9fceb02是之前的一个提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.5</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #共享标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --tags</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #一次推送多个标签</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branchname] </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">tagname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #在特定的标签上创建一个新分支</span></span></code></pre></div><p>12 Git别名。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alias.co</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #为checkout起别名co</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alias.last</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">log -1 HEAD</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #git last 显示最后一次提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> alias.visual</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">!gitk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #想要执行外部命令，而不是一个 Git 子命令。在命令前面加入 ! 符号</span></span></code></pre></div><h3 id="git分支" tabindex="-1">Git分支 <a class="header-anchor" href="#git分支" aria-label="Permalink to &quot;Git分支&quot;">​</a></h3><hr><p>1 Git保存数据保存的是文件的快照，进行提交操作是会提交一个对象，该对象包含一个指向暂存内容快照的指针，还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。内容快照使用的blob对象来保存。下图是个直观展示，该Git 仓库中有五个对象：三个blob对象（保存着文件快照）、一个树对象（记录着目录结构和blob对象索引）以及一个提交对象（包含着指向前述树对象的指针和所有提交信息）。</p><p>2 常用命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#创建分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#切换分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#新建并切换分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hotfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #删除hotfix分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hotfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #合并hotfix分支，先切换到master分支。当合并有冲突后，git status查看，修改后add，重新合并。 </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --merged</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">|</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">--no-merged</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #过滤这个列表中已经合并或尚未合并到当前分支的分支</span></span></code></pre></div><p>3 远程分支。origin是运行<code>git clone</code>时默认的远程仓库名字。如果运行<code>git clone -o dev</code>，那么默认的远程分支名字会是 dev/master。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --track</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/serverfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #本地创建serverfix分支来跟踪远程仓库上的serverfix分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/serverfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #创建一个sf的本地分支来跟踪远程仓库serverfix分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/serverfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #设置已有分支来跟踪远程分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -vv</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看设置是所有跟踪分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --delete</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> serverfix</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #删除远程分支</span></span></code></pre></div><p>4 变基。整个不同分支的修改有合并（merge）和变基（rebase）两种方法。merge可以保留记录，rebase使分支更清晰。使用变基友风险，谨记：不要对在你的仓库外有副本的分支执行变基。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --onto</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> server</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #取出 client 分支，找出处于 client 分支和 server 分支的共同祖先之后的修改，然后把它们在 master 分支上重演一遍</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> serve</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #取出serve分支，在master分支上重演</span></span></code></pre></div><h3 id="分布式git" tabindex="-1">分布式Git <a class="header-anchor" href="#分布式git" aria-label="Permalink to &quot;分布式Git&quot;">​</a></h3><hr><p>1 常见的分布式工作流程有：</p><ul><li>集中式工作流</li><li>集成管理者工作流</li><li>司令官与副官工作流。典型工作流程如下：</li></ul><p>2 向一个项目贡献</p><ul><li>首先，你不会想要把空白错误（根据 git help diff 的描述，结合下面给出的图片，空白错误是指行尾的空格、Tab 制表符，和行首空格后跟 Tab 制表符的行为）提交上去。Git 提供了一个简单的方式来检查这点：在提交前，运行 git diff --check，它将会找到可能的空白错误并将它们为你列出来；</li><li>接下来，尝试让每一个提交成为一个逻辑上的独立变更集；</li><li>最后一件要牢记的事是提交信息。有一个创建优质提交信息的习惯会使 Git 的使用与协作容易的多。一般情况下，信息应当以少于50个字符（25个汉字）的单行开始且简要地描述变更，接着是一个空白行，再接着是一个更详细的解释。</li><li>一些常用命令</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-merges</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue54..origin/master</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #要求 Git 只显示所有在后面分支（在本例中是origin/master）但不在前面分支（在本例中是 issue54）的提交的列表</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/master</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> issue54</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #作用同上一条命令</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> refA</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> refB</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> refC</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #refA 或 refB 包含的但是不被 refC 包含的提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master...experiment</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #三点语法，查看master 或者 experiment 中包含的但不是两者共有的提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --left-right</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master...experiment</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #还会显示出每次提交位于哪一侧</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> request-pull</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/master</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myfork</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #在派生项目中，生成拉取请求的内容</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --squash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> featureB</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #--squash 选项接受被合并的分支上的所有工作，并将其压缩至一个变更集，使仓库变成一个真正的合并发生的状态，而不会真的生成一个合并提交。这意味着你的未来的提交将会只有一个父提交，并允许你引入另一个分支的所有改动，然后在记录一个新提交前做更多的改动。同样 --no-commit 选项在默认合并过程中可以用来延迟生成合并提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> format-patch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -M</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin/master</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #通过邮件的公开项目，使用该命令,format-patch 命令打印出它创建的补丁文件名字。-M 开关告诉 Git 查找重命名</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cat</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.patch</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> imap-send</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #将patch通过邮箱发送出去，前提是.gitconfig中配置好了imap</span></span></code></pre></div><p>3 维护项目</p><p>一些常用命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">  xx.patch</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #应用使用 git diff 或 Unix diff 命令（不推荐）创建的补丁</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --check</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> xx.patch</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #应用补丁之前检查是否可以顺利应用</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> am</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> xx.patch</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #应用使用format-patch生成的补丁</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master...contrib</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #三点语法，显示自当前特性分支与 master 分支的共同祖先起，该分支中的工作。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> archive</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --prefix=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">project/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> gzip</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> describe master</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.tar.gz</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #归档</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> archive</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --prefix=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">project/</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --format=zip</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> \`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> describe master</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">.zip</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #归档</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> shortlog</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --no-merges</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --not</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.0.1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #制作提交简报</span></span></code></pre></div><h3 id="git进阶" tabindex="-1">Git进阶 <a class="header-anchor" href="#git进阶" aria-label="Permalink to &quot;Git进阶&quot;">​</a></h3><hr><p>1 储藏与清理</p><p>下面是储藏和清理的一些常用命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #储藏工作目录，准备干净的合并</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> list</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看储藏的东西</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #应用储藏的东西</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash@{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #应用更旧的储藏</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> drop</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash@{</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #移动指定的储藏</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pop</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #应用并丢弃储藏</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --include-untracked</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #同时储藏未跟踪文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --keep-index</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #不储藏任何你通过git add命令已暂存的东西</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> branch</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#从储藏创建一个分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #清理工作目录</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> stash</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --all</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #移除每一样东西并存放在栈中</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -x</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #做一次完全干净的构建而移除所有由构建生成的.o 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clean</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -d</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #强制移除工作目录中所有未追踪的文件以及空的子目录，可以使用git clean -d -n来做一次演习，看看要做什么</span></span></code></pre></div><p>2 搜索</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gmtime_r</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #寻找gmtime_r并输出所找到的匹配行行号</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -count</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gmtime_r</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #使 Git 输出概述的信息，仅仅包括哪些文件包含匹配以及每个文件包含了多少个匹配</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gmtime_r</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> *</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.c</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #-p选项看匹配的行是属于哪一个方法或者函数，该命令是查看哪个函数调用了gmtime_r</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --break</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --heading</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">#define</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --and</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> LINK</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BUF_MAX</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> \\)</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.8.0</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看在旧版本 1.8.0 的 Git 代码库中定义了常量名包含 “LINK” 或者 “BUF_MAX” 这两个字符串所在的行,--break 和 --heading 选项来使输出更加容易阅读</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :git_deflate_bound:zlib.c</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看 zlib.c 文件中\`git_deflate_bound\` 函数的每一次变更</span></span></code></pre></div><p>3 重写历史。</p><p>- <code>git commit --amend</code>修正最后一次提交。</p><ul><li>修改多个提交信息。通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。可以通过给 <code>git rebase</code> 增加 -i选项来交互式地运行变基。例如：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rebase</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD~3</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #修改最近三次提交信息，运行命令后会进入交互式界面，按照提示进行即可。</span></span></code></pre></div><ul><li><p><code>git rebase -i</code> 同样可以进行排序提交，压缩提交，拆分提交等操作，用到时可以详细参考ProGit的相应部分。</p></li><li><p>如果想要通过脚本的方式改写大量提交的话可以使用 filter-branch 例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。例:</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> filter-branch</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --tree-filter</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rm -f passwords.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #从整个提交历史中移除一个叫做 passwords.txt 的文件</span></span></code></pre></div><p>4 重置操作（reset）。</p><ul><li><code>git reset --soft</code>只移动分支，不更新暂存（索引）和工作目录；</li><li><code>git reset --mixed</code> 不指定--soft和--hard时的默认选项，更新暂存，不更新工作目录；</li><li><code>git reset --hard</code> 更新暂存和工作目录；</li><li>通过路径来重置。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file.txt</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #等价于git reset --mixed HEAD file.txt ，用HEAD分支的file.txt更新暂存（索引）区域</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> reset</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> eb43bf</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file.txt</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #用eb43bf提交的file.txt更新索引</span></span></code></pre></div><p>5 检出（checkout）。</p><ul><li>不带路径的情况。运行 <code>git checkout [branch]</code> 与运行 <code>git reset --hard [branch]</code> 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别:</li></ul><p>首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件吹走；</p><p>第二个重要的不同点在于如何更新 HEAD。reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来 指向另一个分支。结合下图会更清晰的理解：</p><ul><li>带路径。运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。它就像 <code>git reset [branch] file</code>那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。它就像是<code>git reset --hard [branch] file</code>（如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。</li></ul><p>6 重置和检出的总结速查。下面的速查表列出了命令对树的影响。&quot;HEAD&quot; 一列中的 &quot;REF&quot; 表示该命令移动了 HEAD 指向的分支引用，而&quot;HEAD&quot; 则表示只移动了 HEAD 自身。特别注意 WD Safe? 一列 - 如果它标记为 NO，那么运行该命令 之前请考虑一下。</p><p>7 高级合并</p><ul><li><p>合并出现冲突后，Git索引会储藏了所有版本（共同的版本stage1,我们的版本stage2，他们的版本stage3）。</p></li><li><p>合并出现冲突后，可以打开冲突的文件，根据指示修改。</p></li><li><p>一些常用命令：</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --abort</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #尝试恢复到你运行合并前的状态。但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xignore-all-space</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 或</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xignore-space-change</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#忽略任意数量的已有空白的修改 或 忽略所有空白修改</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :1:hello.rb</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.common.rb</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #导出共同版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> show</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> :2:hello.rb</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.ours.rb</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #导出我们的版本</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge-file</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.ours.rb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.common.rb</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.theirs.rb</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.rb</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #手动合并冲突修改后的文件，合并完毕后git clean来清理手动合并创建但不再使用的文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ours</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #合并前比较结果与在你的分支上的内容，换一句话说，看看合并引入了什么</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --base</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #查看文件在两边是如何改动的</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --conflict=diff3</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hello.rb</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #重新检出文件并替换合并冲突标记</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge.conflictstyle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> diff3</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #通过设置 merge.conflictstyle 选项为 diff3 来做为以后合并冲突的默认选项</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --left-right</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD...MERGE_HEAD</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #得到此次合并中包含的每一个分支的所有独立提交的列表</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> log</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --oneline</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --left-right</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --merge</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #只显示任何一边接触了合并冲突文件的提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> revert</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #-m 1 标记指出 “mainline” 需要被保留下来的父结点</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -Xours</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [branch_name]  </span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#选择特定的一边Ours并忽略另外一边Theirs而不是让你手动合并冲突</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> merge-file</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ours</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #合并单个文件</span></span></code></pre></div><p>8 rerere</p><p><code>git rerere</code>功能是一个隐藏的功能。正如它的名字 &quot;reuse recorded resolution&quot; 所指，它允许你让 Git 记住解决一个块冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它。为了启用 rerere 功能，仅仅需要运行这个配置选项：<code>git config --global rerere.enabled true</code>也通过在特定的仓库中创建 .git/rr-cache 目录来开启它，但是设置选项更干净并且可以应用到全局。</p><p>9 打包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bundle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> repo.bundle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HEAD</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #打包，如果你在打包时没有包含 HEAD 引用，你还需要在命令后指定一个 -b master 或者其他被引入的分支，否则Git 不知道应该检出哪一个分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> repo.bundle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> repo</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #解包</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bundle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commits.bundle</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #获取在我们的 master 分支而不在原始仓库中的提交</span></span></code></pre></div><p>10 文件标注</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 12,22</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> simplegit.rb</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #文件标注，展示文件中每一行最后一次修改的提交 -L 选项来限制输出范围在第12至22行</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> blame</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -C</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -L</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 141,153</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> GITPackUpload.m</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #在 git blame 后面加上一个-C，Git 会分析你正在标注的文件，并且尝试找出文件中从别的地方复制过来的代码片段的原始出处</span></span></code></pre></div><p>【全文完】</p>`,82)]))}const y=i(n,[["render",k]]);export{d as __pageData,y as default};
